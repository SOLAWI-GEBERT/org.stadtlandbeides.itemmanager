<?php

use CRM_Itemmanager_ExtensionUtil as E;

/**
 * Form controller class
 *
 * @see https://wiki.civicrm.org/confluence/display/CRMDOC/QuickForm+Reference
 */
class CRM_Itemmanager_Form_RepairMissingContribution extends CRM_Core_Form {

    public $_linerecords;

    public function buildQuickForm() {
        CRM_Utils_System::setTitle(E::ts('Clone contributions to insert missing data'));

        $contributionStatusOptions = CRM_Contribute_BAO_Contribution::buildOptions('contribution_status_id');


        $this->add(
            'Select', // field type
            'contribution_status_id', // field name
            E::ts('Contribution Status'), // field label
            $contributionStatusOptions, NULL //, $setting['html_attributes']
        );
        $this->addButtons([
            [
                'type' => 'next',
                'name' => ts('Duplicate'),
                'spacing' => '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',
                'isDefault' => TRUE,
            ],
            [
                'type' => 'cancel',
                'name' => ts('Cancel'),
            ],
        ]);
        $this->assign('elementNames', $this->getRenderableElementNames());
        parent::buildQuickForm();
    }

    public function preProcess()
    {
        $this->_id = CRM_Utils_Request::retrieve('id', 'Alphanumeric', $this);
        if (!$this->_id) {
            CRM_Core_Session::setStatus(E::ts('Please specify a contribution to clone.'), E::ts('Error'), 'error');
            return;
        }

        $this->_linerecords = CRM_Itemmanager_Util::getLineitemFullRecordByContributionId($this->_id);
        if($this->_linerecords['is_error'])
        {
            $this->processError("ERROR",E::ts('Retrieve line items'),$this->_linerecords['error_message']);
            return;
        }

        $this->assign('lineitems',$this->_linerecords);
        parent::preProcess(); // TODO: Change the autogenerated stub
    }


    public function postProcess() {


        $id = CRM_Utils_Request::retrieve('id', 'Alphanumeric', $this);
        if (!$id) {
            CRM_Core_Session::setStatus(E::ts('Please specify a contribution to clone.'), E::ts('Error'), 'error');
            return;
        }
        $contributionParams = array('id' => $id);

        $contact_id = CRM_Utils_Request::retrieve('cid', 'Integer');


        $clone_contribution = civicrm_api3('Contribution', 'getsingle', array('id' => (int) $id));
        $clone_date = $clone_contribution['receive_date'];

        // Get the given memberships
        $member_array = CRM_Itemmanager_Util::getLastMemberShipsFullRecordByContactId($contact_id);

        if($member_array['is_error'])
        {
            $this->processError("ERROR",E::ts('Retrieve memberships'),$member_array['error_message']);
            return;
        }

        //Create a logical form reference
        $current_membership = null;
        foreach ($member_array['values'] As $membership) {
            //region Related Contributions
            //get the last record
            $contributions = array();
            foreach ($membership['payinfo'] as $contribution_link)
                if ((int)$contribution_link['contribution_id'] == $id)
                    $current_membership = $membership;
        }

        if(!$current_membership)
        {
            $this->processError("ERROR",E::ts('Retrieve related membership'),
                E::ts('There is no membership related to that contribution.'));
            return;
        }

        //get the line items to the last contribution
        $linerecords = CRM_Itemmanager_Util::getLineitemFullRecordByContributionId($id);
        if($linerecords['is_error'])
        {
            $this->processError("ERROR",E::ts('Retrieve line items'),$linerecords['error_message']);
            return;
        }

        $item_prototypes = array();
        $periods = 0;
        foreach ($linerecords As $line_item)
        {
            //get the itemmanager records
            $item_settings = new CRM_Itemmanager_BAO_ItemmanagerSettings();
            $valid=$item_settings->get('price_field_value_id',
                $line_item['linedata']['price_field_value_id']);

            $period = new CRM_Itemmanager_BAO_ItemmanagerPeriods();
            $valid = $period->get('id',$item_settings->itemmanager_periods_id);


            $quantity = $line_item['linedata']['qty'];
            $choices = $line_item['choices'];
            $periods = $choices['period_selection'][0][max(
                array_keys($choices['period_selection'][0]))];

            $item_prototypes[] = array(
                'manager_id'=> $item_settings->id,
                'quantity' => $quantity,
            );
        }

        if(count($item_prototypes)>0)
        {
            try {

                $formValues = $this->exportValues();
                $contributionGetFields = civicrm_api3('Contribution', 'getfields', [
                    'api_action' => "create",
                ]);
                $contributionFieldNames = array_keys($contributionGetFields['values']);
                foreach ($formValues as $formKey => $formValue) {
                    if (in_array($formKey, $contributionFieldNames)) {
                        $contributionParams[$formKey] = $formValue;
                    }
                }

                if ($periods == 1) {
                    //Single Installments
                    $singleInstallmentRenewal = new CRM_Itemmanager_Logic_RenewalSingleInstallmentPlan((int)$current_membership['memberdata']['id'],
                        (int) $id, $periods, $clone_date, (bool)$period->reverse);

                    foreach ($item_prototypes as $prototype)
                    {
                        $singleInstallmentRenewal->addLineItemPrototype($prototype['manager_id'], $prototype['quantity']);
                    }

                    throw new Exception('Not implemented');



                } else {

                    //Multiple Installments
                    $multipleInstallmentRenewal = new CRM_Itemmanager_Logic_RenewalMultipleInstallmentPlan((int)$current_membership['memberdata']['id'],
                        (int) $id,$periods, $clone_date);

                    foreach ($item_prototypes as $prototype) {
                        $multipleInstallmentRenewal->addLineItemPrototype($prototype['manager_id'], $prototype['quantity']);
                    }

                    $multipleInstallmentRenewal->repair($contributionParams);

                }

                $this->processSuccess("Contribution for membership ".$current_membership['memberdata']['name']." has been cloned.");

            }
            catch (CRM_Core_Exception $e) {
                $this->processError("Cloning for contribution of membership ".$current_membership['memberdata']['name']." has been failed.",$e->getMessage(),
                    "Clone contribution");
            }

        }

        parent::postProcess();

    }

    /**
     * Get the fields/elements defined in this form.
     *
     * @return array (string)
     */
    public function getRenderableElementNames() {
        // The _elements list includes some items which should not be
        // auto-rendered in the loop -- such as "qfKey" and "buttons".  These
        // items don't have labels.  We'll identify renderable by filtering on
        // the 'label'.
        $elementNames = array();
        foreach ($this->_elements as $element) {
            /** @var HTML_QuickForm_Element $element */
            $label = $element->getLabel();
            if (!empty($label)) {
                $elementNames[] = $element->getName();
            }
        }
        return $elementNames;
    }

    /**
     * report error data
     */
    protected function processError($status, $title, $message) {
        CRM_Core_Session::setStatus($status . "<br/>" . $message, ts('Error', array('domain' => 'org.stadtlandbeides.itemmanager')), 'error');
        $this->assign("error_title",   $title);
        $this->assign("error_message", $message);


    }

    protected function processSuccess($message) {
        CRM_Core_Session::setStatus($message, ts('Success', array('domain' => 'org.stadtlandbeides.itemmanager')), 'success');



    }

    protected function processInfo($message) {
        CRM_Core_Session::setStatus($message, ts('Info', array('domain' => 'org.stadtlandbeides.itemmanager')), 'info');



    }

}
