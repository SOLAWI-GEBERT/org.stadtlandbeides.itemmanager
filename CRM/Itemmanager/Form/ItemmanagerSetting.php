<?php

require_once 'CRM/Admin/Form/Setting.php';
use CRM_Itemmanager_ExtensionUtil as E;

/**
 * Form controller class
 *
 * @see https://docs.civicrm.org/dev/en/latest/framework/quickform/
 */
class CRM_Itemmanager_Form_ItemmanagerSetting extends CRM_Core_Form {
    function __construct()
    {
        parent::__construct();
    }

    public function buildQuickForm() {

    // add form elements
    $this->add(
      'select', // field type
      'favorite_color', // field name
      'Favorite Color', // field label
      $this->getColorOptions(), // list of options
      TRUE // is required
    );
    $this->addButtons(array(
      array(
        'type' => 'submit',
        'name' => E::ts('Submit'),
        'isDefault' => TRUE,
      ),
    ));

    // export form elements
    $this->assign('elementNames', $this->getRenderableElementNames());
    parent::buildQuickForm();
  }

  public function preProcess()
  {
      try {
          $pricefield_values_records = civicrm_api3('PriceFieldValue', 'get',array('sequential' => 1,'return' => 'id'));

          if( $pricefield_values_records['is_error']) return;

          $pricefield_records = civicrm_api3('PriceField', 'get',array('sequential' => 1,'return' => 'id'));
          if( $pricefield_records['is_error']) return;

          $priceset_records = civicrm_api3('PriceSet', 'get',array('sequential' => 1,'return' => 'id'));
          if( $priceset_records['is_error']) return;

          $itemmanager_price_fields = \Civi\Api4\ItemmanagerSettings::get()
              ->addSelect('price_field_value_id')
              ->setCheckPermissions(FALSE)
              ->execute()
              ->indexBy('price_field_value_id');

          $pricefield_value_ids = array_column($pricefield_values_records['values'],'id');
          $pricefield_ids = array_column($pricefield_values_records['values'],'id');
          $priceset__ids = array_column($pricefield_values_records['values'],'id');
          $itemmanager_price_fields_ids = array_column($itemmanager_price_fields->getArrayCopy(),'price_field_value_id');

          $todelete = array();
          foreach ($itemmanager_price_fields_ids as $field_id)
          {
              if(!in_array((string)$field_id,$pricefield_value_ids))
                  $todelete[] = $field_id;
          }

          $toinsert = array();
          foreach ($pricefield_value_ids as $field_id)
          {
              if(!in_array((int)$field_id,$itemmanager_price_fields_ids))
                  $toinsert[] = $field_id;
          }
          echo "test";


      } catch (CiviCRM_API3_Exception $e) {

          return;
      }



      parent::preProcess(); // TODO: Change the autogenerated stub
  }


    public function postProcess() {
    $values = $this->exportValues();
    $options = $this->getColorOptions();
    CRM_Core_Session::setStatus(E::ts('You picked color "%1"', array(
      1 => $options[$values['favorite_color']],
    )));
    parent::postProcess();
  }

  public function getColorOptions() {
    $options = array(
      '' => E::ts('- select -'),
      '#f00' => E::ts('Red'),
      '#0f0' => E::ts('Green'),
      '#00f' => E::ts('Blue'),
      '#f0f' => E::ts('Purple'),
    );
    foreach (array('1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e') as $f) {
      $options["#{$f}{$f}{$f}"] = E::ts('Grey (%1)', array(1 => $f));
    }
    return $options;
  }

  /**
   * Get the fields/elements defined in this form.
   *
   * @return array (string)
   */
  public function getRenderableElementNames() {
    // The _elements list includes some items which should not be
    // auto-rendered in the loop -- such as "qfKey" and "buttons".  These
    // items don't have labels.  We'll identify renderable by filtering on
    // the 'label'.
    $elementNames = array();
    foreach ($this->_elements as $element) {
      /** @var HTML_QuickForm_Element $element */
      $label = $element->getLabel();
      if (!empty($label)) {
        $elementNames[] = $element->getName();
      }
    }
    return $elementNames;
  }

}
